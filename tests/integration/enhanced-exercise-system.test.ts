/**\n * Integration tests for the enhanced exercise generation system\n * Tests the full flow from batch generation to queue management\n */\n\nimport { describe, test, expect, beforeAll, afterAll, beforeEach } from '@jest/globals';\nimport { ExerciseDatabase } from '@/lib/exerciseDatabase';\nimport { EnhancedFallbackService } from '@/services/enhancedFallbackService';\nimport { ExerciseQueueService } from '@/services/queueService';\nimport { BatchGenerationRequest } from '@/types/enhanced';\nimport { LanguageLevel } from '@/types';\n\n// Mock environment for testing\nprocess.env.NODE_ENV = 'test';\n\ndescribe('Enhanced Exercise System Integration', () => {\n  beforeAll(async () => {\n    // Initialize test database\n    await ExerciseDatabase.initializeTables();\n  });\n\n  beforeEach(async () => {\n    // Clean up test data before each test\n    // Note: In a real test environment, you'd want to use a separate test database\n  });\n\n  describe('Database Operations', () => {\n    test('should initialize database tables successfully', async () => {\n      // This test verifies that all tables are created correctly\n      const stats = await ExerciseDatabase.getUsageStats();\n      expect(stats).toBeDefined();\n      expect(stats.totalExercises).toBeGreaterThanOrEqual(0);\n    });\n\n    test('should save and retrieve exercise batches', async () => {\n      const testExercises = [\n        {\n          id: 'test-1',\n          sentence: 'Eu ___ português.',\n          gapIndex: 1,\n          correctAnswer: 'falo',\n          topic: 'present-indicative',\n          level: 'A1' as LanguageLevel,\n          multipleChoiceOptions: ['falo', 'falas', 'fala', 'falamos'],\n          explanations: {\n            pt: 'Primeira pessoa do singular do presente do indicativo.',\n            en: 'First person singular present indicative.',\n            uk: 'Перша особа однини теперішнього часу.'\n          },\n          hint: { infinitive: 'falar', form: 'present indicative' },\n          source: 'ai' as const,\n          difficultyScore: 0.5,\n          usageCount: 0\n        }\n      ];\n\n      const savedIds = await ExerciseDatabase.saveExerciseBatch(testExercises);\n      expect(savedIds).toHaveLength(1);\n\n      const retrieved = await ExerciseDatabase.getExercises({\n        levels: ['A1'],\n        topics: ['present-indicative'],\n        limit: 1\n      });\n\n      expect(retrieved).toHaveLength(1);\n      expect(retrieved[0].sentence).toBe('Eu ___ português.');\n      expect(retrieved[0].explanations.pt).toBe('Primeira pessoa do singular do presente do indicativo.');\n    });\n\n    test('should track exercise usage correctly', async () => {\n      const testExercise = {\n        id: 'test-usage',\n        sentence: 'Test sentence ___.',\n        gapIndex: 1,\n        correctAnswer: 'test',\n        topic: 'test-topic',\n        level: 'A1' as LanguageLevel,\n        multipleChoiceOptions: ['test', 'other'],\n        explanations: { pt: 'Test', en: 'Test', uk: 'Test' },\n        source: 'ai' as const,\n        difficultyScore: 0.5,\n        usageCount: 0\n      };\n\n      const [exerciseId] = await ExerciseDatabase.saveExerciseBatch([testExercise]);\n      \n      await ExerciseDatabase.markExerciseUsed(exerciseId, 'test-session', true, 1500);\n      \n      const retrieved = await ExerciseDatabase.getExercises({\n        levels: ['A1'],\n        topics: ['test-topic'],\n        limit: 1\n      });\n\n      expect(retrieved[0].usageCount).toBe(1);\n    });\n  });\n\n  describe('Enhanced Fallback Service', () => {\n    test('should migrate static exercises to database', async () => {\n      const initialStats = await ExerciseDatabase.getUsageStats();\n      const initialCount = initialStats.totalExercises;\n\n      const migratedCount = await EnhancedFallbackService.populateFromStaticExercises();\n      expect(migratedCount).toBeGreaterThan(0);\n\n      const finalStats = await ExerciseDatabase.getUsageStats();\n      expect(finalStats.totalExercises).toBeGreaterThan(initialCount);\n      expect(finalStats.exercisesBySource.static).toBeGreaterThan(0);\n    });\n\n    test('should return database exercises with priority', async () => {\n      await EnhancedFallbackService.populateFromStaticExercises();\n      \n      const exercise = await EnhancedFallbackService.getExercise(\n        ['A1'],\n        ['present-indicative'],\n        {},\n        'test-session'\n      );\n\n      expect(exercise).toBeDefined();\n      expect(exercise?.level).toBe('A1');\n      expect(exercise?.multipleChoiceOptions).toBeDefined();\n      expect(exercise?.explanations).toBeDefined();\n      expect(exercise?.explanations.pt).toBeDefined();\n      expect(exercise?.explanations.en).toBeDefined();\n      expect(exercise?.explanations.uk).toBeDefined();\n    });\n\n    test('should return exercise batch with correct count', async () => {\n      await EnhancedFallbackService.populateFromStaticExercises();\n      \n      const exercises = await EnhancedFallbackService.getExerciseBatch(\n        ['A1', 'A2'],\n        ['present-indicative'],\n        5,\n        {},\n        'test-session'\n      );\n\n      expect(exercises).toBeDefined();\n      expect(exercises.length).toBeLessThanOrEqual(5);\n      exercises.forEach(exercise => {\n        expect(['A1', 'A2']).toContain(exercise.level);\n        expect(exercise.multipleChoiceOptions).toBeDefined();\n        expect(exercise.explanations).toBeDefined();\n      });\n    });\n  });\n\n  describe('Queue Service', () => {\n    test('should add items to generation queue', async () => {\n      const queueId = await ExerciseQueueService.addToQueue({\n        levels: ['A1'],\n        topics: ['present-indicative'],\n        sessionId: 'test-queue-session',\n        count: 10,\n        priority: 'immediate'\n      });\n\n      expect(queueId).toBeDefined();\n      expect(typeof queueId).toBe('string');\n    });\n\n    test('should process queue items', async () => {\n      await ExerciseQueueService.addToQueue({\n        levels: ['A1'],\n        topics: ['present-indicative'],\n        sessionId: 'test-process-session',\n        count: 5,\n        priority: 'background'\n      });\n\n      // Process queue (this would normally be done in background)\n      await ExerciseQueueService.forceProcessQueue();\n\n      // Check that exercises were generated and saved\n      const exercises = await ExerciseDatabase.getExercises({\n        levels: ['A1'],\n        topics: ['present-indicative'],\n        limit: 10\n      });\n\n      expect(exercises.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe('API Integration', () => {\n    test('should generate exercise batch via API', async () => {\n      const mockRequest = {\n        levels: ['A1'] as LanguageLevel[],\n        topics: ['present-indicative'],\n        sessionId: 'test-api-session',\n        count: 5\n      };\n\n      // This would be a real API call in a full integration test\n      const exercises = await EnhancedFallbackService.getExerciseBatch(\n        mockRequest.levels,\n        mockRequest.topics,\n        mockRequest.count,\n        {},\n        mockRequest.sessionId\n      );\n\n      expect(exercises).toBeDefined();\n      expect(exercises.length).toBeLessThanOrEqual(5);\n      \n      exercises.forEach(exercise => {\n        expect(exercise.sentence).toContain('___');\n        expect(exercise.correctAnswer).toBeDefined();\n        expect(exercise.multipleChoiceOptions).toBeDefined();\n        expect(exercise.multipleChoiceOptions.length).toBeGreaterThanOrEqual(2);\n        expect(exercise.multipleChoiceOptions).toContain(exercise.correctAnswer);\n        expect(exercise.explanations).toBeDefined();\n        expect(exercise.explanations.pt).toBeDefined();\n        expect(exercise.explanations.en).toBeDefined();\n        expect(exercise.explanations.uk).toBeDefined();\n      });\n    });\n  });\n\n  describe('Error Handling', () => {\n    test('should handle database connection errors gracefully', async () => {\n      // Mock database error\n      const mockError = new Error('Database connection failed');\n      \n      // Test that fallback service handles errors gracefully\n      // This would require mocking the database connection\n      expect(true).toBe(true); // Placeholder - implement actual error testing\n    });\n\n    test('should fall back to static exercises when database fails', async () => {\n      // Test fallback to static exercises\n      const exercise = await EnhancedFallbackService.getExercise(\n        ['A1'],\n        [],\n        {},\n        'test-fallback-session'\n      );\n\n      expect(exercise).toBeDefined();\n      expect(exercise?.level).toBe('A1');\n    });\n  });\n\n  describe('Performance', () => {\n    test('should retrieve exercises within performance thresholds', async () => {\n      await EnhancedFallbackService.populateFromStaticExercises();\n      \n      const startTime = Date.now();\n      \n      const exercises = await EnhancedFallbackService.getExerciseBatch(\n        ['A1', 'A2'],\n        ['present-indicative'],\n        10,\n        {},\n        'test-performance-session'\n      );\n      \n      const endTime = Date.now();\n      const duration = endTime - startTime;\n      \n      expect(exercises.length).toBeGreaterThan(0);\n      expect(duration).toBeLessThan(1000); // Should complete in under 1 second\n    });\n  });\n});\n\n// Clean up after all tests\nafterAll(async () => {\n  // Clean up test data\n  console.log('Integration tests completed');\n});"