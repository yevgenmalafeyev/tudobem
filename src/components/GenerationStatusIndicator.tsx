'use client';

import { useState, useEffect } from 'react';

interface GenerationStatusProps {
  source: 'ai' | 'database' | 'fallback' | 'mixed';
  isBackgroundLoading?: boolean;
  exerciseCount?: number;
  queuePosition?: number;
  totalGenerated?: number;
  currentProgress?: {
    completed: number;
    total: number;
    progressPercentage: number;
  };
}

export const GenerationStatusIndicator: React.FC<GenerationStatusProps> = ({
  source,
  isBackgroundLoading = false,
  exerciseCount = 0,
  queuePosition,
  totalGenerated = 0,
  currentProgress
}) => {
  const [isExpanded, setIsExpanded] = useState(false);
  const [showDetail, setShowDetail] = useState(false);

  // Auto-expand when background loading starts
  useEffect(() => {
    if (isBackgroundLoading) {
      setIsExpanded(true);
      const timer = setTimeout(() => setIsExpanded(false), 3000);
      return () => clearTimeout(timer);
    }
  }, [isBackgroundLoading]);

  const getStatusConfig = () => {
    switch (source) {
      case 'ai':
        return {
          icon: '🤖',
          text: 'AI Fresh',
          color: 'text-green-600',
          bgColor: 'bg-green-50',
          borderColor: 'border-green-200',
          description: 'Newly generated by Claude AI',
          status: 'Fresh AI-generated questions'
        };
      case 'database':
        return {
          icon: '⚠️',
          text: 'Fallback',
          color: 'text-yellow-600', 
          bgColor: 'bg-yellow-50',
          borderColor: 'border-yellow-200',
          description: 'Using database questions (AI key missing or API unreachable)',
          status: 'Fallback: Database questions'
        };
      case 'mixed':
        return {
          icon: '🔄',
          text: 'Mixed',
          color: 'text-purple-600',
          bgColor: 'bg-purple-50',
          borderColor: 'border-purple-200',
          description: 'Mix of AI and database questions',
          status: 'AI + Database questions'
        };
      case 'fallback':
        return {
          icon: '🆘',
          text: 'Emergency',
          color: 'text-red-600',
          bgColor: 'bg-red-50',
          borderColor: 'border-red-200',
          description: 'Emergency fallback - basic static questions',
          status: 'Emergency: Static questions'
        };
    }
  };

  const status = getStatusConfig();

  const handleToggleDetail = () => {
    setShowDetail(!showDetail);
    if (!showDetail) {
      setIsExpanded(true);
    }
  };

  return (
    <div className="fixed top-4 right-4 z-50 flex flex-col items-end space-y-2">
      {/* Main Status Indicator */}
      <div 
        className={`
          relative flex items-center space-x-2 px-3 py-2 rounded-lg text-xs font-medium 
          transition-all duration-300 cursor-pointer select-none
          ${status.bgColor} ${status.color} ${status.borderColor}
          border shadow-sm hover:shadow-md transform hover:scale-105
          ${isExpanded ? 'min-w-32' : 'min-w-20'}
        `}
        title={status.description}
        onClick={handleToggleDetail}
      >
        {/* Status Icon */}
        <span className="text-sm flex-shrink-0">{status.icon}</span>
        
        {/* Status Text */}
        <span className="font-medium">{status.text}</span>
        
        {/* Exercise Count Badge */}
        {exerciseCount > 0 && (
          <span className="bg-white/80 text-gray-700 px-1.5 py-0.5 rounded-full text-xs font-bold min-w-[1.5rem] text-center">
            {exerciseCount}
          </span>
        )}
        
        {/* Background Loading Indicator */}
        {isBackgroundLoading && (
          <div className="w-2 h-2 bg-current rounded-full animate-pulse flex-shrink-0" />
        )}

        {/* Expand/Collapse Icon */}
        <div className={`transform transition-transform duration-200 ${showDetail ? 'rotate-180' : ''}`}>
          <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
          </svg>
        </div>
      </div>

      {/* Detailed Status Panel */}
      {showDetail && (
        <div className={`
          ${status.bgColor} ${status.borderColor} border rounded-lg shadow-lg p-3 text-xs
          transform transition-all duration-300 ease-out
          min-w-48 max-w-64
        `}>
          {/* Status Description */}
          <div className="font-medium text-gray-800 mb-2">
            {status.status}
          </div>

          {/* Progress Information */}
          {currentProgress && (
            <div className="mb-2">
              <div className="flex justify-between items-center mb-1">
                <span className="text-gray-600">Progress:</span>
                <span className="font-medium">
                  {currentProgress.completed}/{currentProgress.total}
                </span>
              </div>
              <div className="w-full bg-gray-200 rounded-full h-1.5">
                <div 
                  className={`h-1.5 rounded-full transition-all duration-300 ${
                    source === 'ai' ? 'bg-green-500' : 
                    source === 'database' ? 'bg-blue-500' : 
                    source === 'mixed' ? 'bg-purple-500' : 'bg-orange-500'
                  }`}
                  style={{ width: `${Math.min(currentProgress.progressPercentage, 100)}%` }}
                />
              </div>
            </div>
          )}

          {/* Statistics */}
          <div className="space-y-1 text-gray-600">
            {totalGenerated > 0 && (
              <div className="flex justify-between">
                <span>Total Generated:</span>
                <span className="font-medium">{totalGenerated}</span>
              </div>
            )}
            
            {exerciseCount > 0 && (
              <div className="flex justify-between">
                <span>Remaining:</span>
                <span className="font-medium">{exerciseCount}</span>
              </div>
            )}

            {queuePosition && queuePosition > 0 && (
              <div className="flex justify-between">
                <span>Queue Position:</span>
                <span className="font-medium">#{queuePosition}</span>
              </div>
            )}
          </div>

          {/* Background Loading Status */}
          {isBackgroundLoading && (
            <div className="mt-2 pt-2 border-t border-gray-200">
              <div className="flex items-center space-x-2 text-gray-600">
                <div className="w-2 h-2 bg-current rounded-full animate-pulse" />
                <span>Loading next batch...</span>
              </div>
            </div>
          )}

          {/* Help Text */}
          <div className="mt-2 pt-2 border-t border-gray-200 text-gray-500 text-xs">
            {source === 'ai' && 'Fresh questions generated specifically for you'}
            {source === 'database' && 'Please add your Claude API key for fresh questions'}
            {source === 'mixed' && 'Combination of fresh AI and database questions'}
            {source === 'fallback' && 'Basic questions - please check your connection'}
          </div>
        </div>
      )}
    </div>
  );
};

export default GenerationStatusIndicator;